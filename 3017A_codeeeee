/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       VEX                                                       */
/*    Created:      Thu Sep 26 2019                                           */
/*    Description:  Competition Template                                      */
/*                                                                            */
/*----------------------------------------------------------------------------*/

// ---- START VEXCODE CONFIGURED DEVICES ----
// Robot Configuration:
// [Name]               [Type]        [Port(s)]
// Controller1          controller                    
// frontLeft            motor         6               
// backRight            motor         20              
// backLeft             motor         10              
// frontRight           motor         11              
// clawHand             motor         14              
// clawArm              motor         5               
// clawArm2             motor         1               
// ---- END VEXCODE CONFIGURED DEVICES ----

#include "vex.h"

using namespace vex;

// A global instance of competition
competition Competition;

// define your global instances of motors and other devices here

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the V5 has been powered on and        */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton(void) {
  // Initializing Robot Configuration. DO NOT REMOVE!
  vexcodeInit();

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void autonomous(void) {
frontLeft.spin(directionType::fwd,127,velocityUnits::pct);
frontRight.spin(directionType::fwd,107,velocityUnits::pct);
backLeft.spin(directionType::fwd,127,velocityUnits::pct);
backRight.spin(directionType::fwd,107,velocityUnits::pct);
clawArm.spin(directionType::fwd,80,velocityUnits::pct);
clawArm2.spin(directionType::fwd,80,velocityUnits::pct);
wait (0.7, seconds);
clawArm.stop(brakeType::hold);
clawArm2.stop(brakeType::hold);
wait (0.7, seconds);
frontLeft.stop(brakeType::hold);
frontRight.stop(brakeType::hold);
backLeft.stop(brakeType::hold) ;
backRight.stop(brakeType::hold);
wait (.1, seconds);
clawHand.spin(directionType::fwd,50,velocityUnits::pct);
wait (2, seconds);
clawArm.stop(brakeType::hold);
frontLeft.spin(directionType::rev,127,velocityUnits::pct);
frontRight.spin(directionType::rev,95,velocityUnits::pct);
backLeft.spin(directionType::rev,127,velocityUnits::pct);
backRight.spin(directionType::rev,95,velocityUnits::pct);
wait (1.3, seconds);
clawHand.stop(brakeType::hold);
frontLeft.stop(brakeType::hold);
backLeft.stop(brakeType::hold) ;
frontRight.stop(brakeType::hold);
backRight.stop(brakeType::hold) ;
wait(.2, seconds);
clawHand.spin(directionType::rev,50,velocityUnits::pct);
wait(2, seconds);
clawHand.stop(brakeType::hold);
frontLeft.spin(directionType::rev,127,velocityUnits::pct);
frontRight.spin(directionType::rev,107,velocityUnits::pct);
backLeft.spin(directionType::rev,127,velocityUnits::pct);
backRight.spin(directionType::rev,107,velocityUnits::pct);
wait (.4, seconds);
clawHand.stop(brakeType::hold);
frontLeft.stop(brakeType::hold);
frontRight.stop(brakeType::hold);
backLeft.stop(brakeType::hold) ;
backRight.stop(brakeType::hold);
wait (59, seconds);
frontLeft.spin(directionType::rev,127,velocityUnits::pct);
frontRight.spin(directionType::fwd,107,velocityUnits::pct);
backLeft.spin(directionType::rev ,107,velocityUnits::pct);
backRight.spin(directionType::fwd,127,velocityUnits::pct);
wait(.3, seconds);
frontLeft.stop(brakeType::hold);
frontRight.stop(brakeType::hold);
backLeft.stop(brakeType::hold);
backRight.stop(brakeType::hold);
wait(.3, seconds);
frontLeft.spin(directionType::fwd,127,velocityUnits::pct);
frontRight.spin(directionType::fwd,107,velocityUnits::pct);
backLeft.spin(directionType::fwd,127,velocityUnits::pct);
backRight.spin(directionType::fwd,107,velocityUnits::pct);
wait (2, seconds);
frontLeft.stop(brakeType::hold);
frontRight.stop(brakeType::hold);
backLeft.stop(brakeType::hold);
backRight.stop(brakeType::hold);
wait (.5, seconds);
frontLeft.spin(directionType::fwd,110,velocityUnits::pct);
frontRight.spin(directionType::rev,110,velocityUnits::pct);
backLeft.spin(directionType::fwd,110,velocityUnits::pct);
backRight.spin(directionType::rev,110,velocityUnits::pct);
wait(.5, seconds);
frontLeft.stop(brakeType::hold);
frontRight.stop(brakeType::hold);
backLeft.stop(brakeType::hold);
backRight.stop(brakeType::hold);
wait(1,seconds);
frontLeft.spin(directionType::fwd,127,velocityUnits::pct);
backLeft.spin(directionType::fwd,127,velocityUnits::pct);
frontRight.spin(directionType::fwd,107,velocityUnits::pct);
backRight.spin(directionType::fwd,107,velocityUnits::pct);
wait(.4, seconds);
clawHand.spin(directionType::fwd,50,velocityUnits::pct);
wait (2, seconds);
clawHand.stop(brakeType::hold);
frontLeft.spin(directionType::rev,127,velocityUnits::pct);
frontRight.spin(directionType::rev,95,velocityUnits::pct);
backLeft.spin(directionType::rev,127,velocityUnits::pct);
backRight.spin(directionType::rev,95,velocityUnits::pct);
wait(.8, seconds);
frontLeft.stop(brakeType::hold);
frontRight.stop(brakeType::hold);
backLeft.stop(brakeType::hold);
backRight.stop(brakeType::hold);

  // ..........................................................................
  // Insert autonomous user code here.
  // ..........................................................................
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void usercontrol(void) {
  // User control code here, inside the loop
  while (1) {
 frontLeft.spin(forward,Controller1.Axis3.value(),velocityUnits::pct); //When Axis 2 is moved, the front left motor will spin in unison with the back left
frontRight.spin(forward,Controller1.Axis2.value(),velocityUnits::pct); //When Axis 3 is moved, the front right motor will spin in unison with the back left
backLeft.spin(forward,Controller1.Axis3.value(),velocityUnits::pct); //When Axis 2 is moved, the front left motor will spin in unison with the back leftfrontLeft.spin(forward,Controller1.Axis2.value(),velocityUnits::pct); 
backRight.spin(forward,Controller1.Axis2.value(),velocityUnits::pct); //When Axis 2 is moved, the front left motor will spin in unison with the back left
 
if (Controller1.ButtonA.pressing())  // If button A is being pressed, begin the following code
{
clawHand.spin(directionType::fwd,110,velocityUnits::pct); //When button A is pressed, the front right intake will spin forward
}
else if(Controller1.ButtonX.pressing())   //if button X is being pressed, begin the code bellow
{
clawHand.spin(directionType::rev,110,velocityUnits::pct);  //When button X is pressed, the front right intake will spin in reverse
}
else //if no buttons are being pressed
{
clawHand.stop(brakeType::hold);  // Right intake motor is stopped
}
if (Controller1.ButtonR1.pressing())  // If button A is being pressed, begin the following code
{
clawArm.spin(directionType::fwd,110,velocityUnits::pct); //When button A is pressed, the front right intake will spin forward
clawArm2.spin(directionType::fwd,110,velocityUnits::pct);
}
else if(Controller1.ButtonR2.pressing())   //if button X is being pressed, begin the code bellow
{
clawArm.spin(directionType::rev,110,velocityUnits::pct);  //When button X is pressed, the front right intake will spin in reverse
clawArm2.spin(directionType::rev,110,velocityUnits::pct);

}
else //if no buttons are being pressed
{
clawArm.stop(brakeType::hold);  // Right intake motor is stopped
clawArm2.stop(brakeType::hold);
}

    // This is the main execution loop for the user control program.
    // Each time through the loop your program should update motor + servo
    // values based on feedback from the joysticks.

    // ........................................................................
    // Insert user code here. This is where you use the joystick values to
    // update your motors, etc.
    // ........................................................................

    wait(20, msec); // Sleep the task for a short amount of time to
                    // prevent wasted resources.
  }
}

//
// Main will set up the competition functions and callbacks.
//
int main() {
  // Set up callbacks for autonomous and driver control periods.
  Competition.autonomous(autonomous);
  Competition.drivercontrol(usercontrol);

  // Run the pre-autonomous function.
  pre_auton();

  // Prevent main from exiting with an infinite loop.
  while (true) {
    wait(100, msec);
  }
}
